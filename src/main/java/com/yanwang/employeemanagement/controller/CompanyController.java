package com.yanwang.employeemanagement.controller;

import com.yanwang.employeemanagement.domain.Company;
import com.yanwang.employeemanagement.service.CompanyService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import javax.validation.Valid;

@Controller // This means that this class is a Controller
public class CompanyController {

	@Autowired
	// This means to get the bean which is auto-generated by Spring
	// We will use an employeeService for each
	CompanyService companyService;

	//	display list of companies
	@GetMapping("/companyList")
	// This means that this method will be executed when user sends GET Requests to "/"
	// In our case, "http://localhost:8080/"
	public String viewCompanyList(Model model) {

		//	We can use this attribute "listCompanies" to perform server-side rendering of the HTML with using Thymeleaf.
		//	We set all companies data as "listCompanies"
		model.addAttribute("listCompanies", companyService.getAllCompanies());
		return "company_list";
	}

	//	showNewCompanyForm
	@GetMapping("/showNewCompanyForm")
	// This means that this method will be executed when user sends GET Requests to "/showNewCompanyForm"
	// In our case,  "http://localhost:8080/showNewCompanyForm"
	public String showNewCompanyForm(Model model) {
		Company company = new Company();

		// We can use this attribute "company" to perform server-side rendering of the HTML with using Thymeleaf.
		// We set employee object as "company"
		model.addAttribute("company", company);
		return "new_company";
	}

	//	add an employee
	@PostMapping("/saveCompany")
	// This means that this method will be executed when user sends POST Requests to "/saveCompany"
	// In our case, "http://localhost:8080/saveCompany"
	public String saveCompany(@Valid @ModelAttribute("company") Company company, BindingResult bindingResult) {
		//	@ModelAttribute  binds the object called "company" of request body from the POST request into the employee parameter of the saveCompany() method.
		long cmpID = company.getId();
		if (bindingResult.hasErrors()) {
			if (cmpID == 0) {
				return "new_company";
			} else {
				return "update_company";
			}
		}
		companyService.saveCompany(company);
		return "redirect:/companyList";
	}

	//	show update form
	@GetMapping("/showFormForUpdateCompany/{id}")
	// This means that this method will be executed when user sends GET Requests to "/showFormForUpdateCompany/{employee's id}"
	// In our case, "http://localhost:8080/showFormForUpdateCompany/{company's id}"
	public String showUpdateForm(@PathVariable Long id, Model model) {
		// @PathVariable binds the {id} which the path of GET request contains into the id parameter of showUpdateForm() method.

		Company company = companyService.getCompanyById(id);

		//	We can use this attribute "company" to perform server-side rendering of the HTML with using Thymeleaf.
		//	We set company data as "company"
		model.addAttribute("company", company);
		return "update_company";
	}

	//	delete the employee by id
	@GetMapping("/deleteCompany/{id}")
	// This means that this method will be executed when user sends GET Requests to "/delete/{company's id}"
	//	In our case, "http://localhost:8080/delete/{company's id}"
	public String deleteCompanyById(@PathVariable Long id, Model model) {
		companyService.deleteCompanyById(id);

	//	after delete the company data from database, redirect to "/"
		return "redirect:/companyList";
	}
}
